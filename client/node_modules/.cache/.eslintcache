[{"/Users/guprahul7/Desktop/React/spacex_launch_stats/client/src/index.js":"1","/Users/guprahul7/Desktop/React/spacex_launch_stats/client/src/App.js":"2","/Users/guprahul7/Desktop/React/spacex_launch_stats/client/src/reportWebVitals.js":"3","/Users/guprahul7/Desktop/React/spacex_launch_stats/client/src/components/launches.js":"4","/Users/guprahul7/Desktop/React/spacex_launch_stats/client/src/components/launchitem.js":"5","/Users/guprahul7/Desktop/React/spacex_launch_stats/client/src/components/mission_key.js":"6","/Users/guprahul7/Desktop/React/spacex_launch_stats/client/src/components/launch.js":"7"},{"size":500,"mtime":1619642985632,"results":"8","hashOfConfig":"9"},{"size":1690,"mtime":1620846544900,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1619642985634,"results":"11","hashOfConfig":"9"},{"size":2303,"mtime":1620844128920,"results":"12","hashOfConfig":"9"},{"size":1829,"mtime":1620843186972,"results":"13","hashOfConfig":"9"},{"size":332,"mtime":1620154956155,"results":"14","hashOfConfig":"9"},{"size":3268,"mtime":1620845654710,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1qq46vf",{"filePath":"18","messages":"19","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},"/Users/guprahul7/Desktop/React/spacex_launch_stats/client/src/index.js",[],"/Users/guprahul7/Desktop/React/spacex_launch_stats/client/src/App.js",["33","34"],"import React, { Component } from 'react';\n\nimport { ApolloClient, InMemoryCache } from '@apollo/client';\nimport { ApolloProvider } from '@apollo/client/react'; //similar to React's Context.Provider\n//It wraps our React app and places the client on the context, which enables us to access it from anywhere in our component tree.\n\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\n\nimport { useQuery, gql } from '@apollo/client';\n\nimport './App.css';\nimport Launches from './components/launches';\nimport Launch from './components/launch';\nimport logo from './spacex_logo.png';\n\nconst client = new ApolloClient({\n  //uri: 'http://localhost:5000/graphql',\n  uri: '/graphql',\n  cache: new InMemoryCache()\n});\n\nclass App extends Component {\n  render() {\n    return (\n      <ApolloProvider client={client}>\n        {/* We wanna wrap evth. in our Router except the Provider above,\n          since it is the outermost element here */}\n      <Router>\n        <div className=\"container\">\n          <img \n            src={logo} \n            alt=\"SpaceX\"\n            style={{ width:300, display: 'block', margin: 'auto'}}\n          />\n          <Route exact path=\"/\" component={Launches}></Route>\n          <Route exact path=\"/launch/:f_number_url\" component={Launch}></Route>\n          {/* This :f_number_url refers to the url mentioned in <Link> in launchitem.js, and is later \n            * used to obtain the contents of the url in a variable using match.params in launch.js/}\n        {/* instead of directly embedding <Launches/> here, we used router to same page and linked the component */}\n        </div>\n      </Router>\n      </ApolloProvider>\n    );\n  }\n}\n \nexport default App;\n","/Users/guprahul7/Desktop/React/spacex_launch_stats/client/src/reportWebVitals.js",[],"/Users/guprahul7/Desktop/React/spacex_launch_stats/client/src/components/launches.js",["35","36"],"//Launches is where we want to make the query to GraphQL\n//We want to use class based components\n\nimport React, { Component } from 'react';\nimport { gql, useQuery } from '@apollo/client';\nimport LaunchItem from './launchitem';\nimport MissionKey from './mission_key';\n\n/*The query part is in the render. Creating it here.\nquery LaunchesQuery is just to label that query\n*/\nconst LAUNCHES_QUERY = gql `\n    query LaunchesQuery {\n        launches {\n            flight_number\n            mission_name\n            launch_date_local\n            launch_success\n        }\n    }\n`; /* \n    using/referencing the launches query (that we defined in schema.js) to make \n    a request to the spaceX api for the data we need. By default, the launches \n    query requests data for all fields we specified in its definition, however \n    here we are only requesting for specific fields that we need \n    */\n\nconst Launches = () => {\n    const {loading, error, data} = useQuery(LAUNCHES_QUERY);\n    if (loading) {return <h4>Loading...</h4>;}\n    if (error) {console.log(\"error=\", error);}\n    //console.log(\"data=\", data);\n    \n    let filteredLaunches = data.launches; //launches query of gql - a list of launchType objects\n    const displayLaunches = () => {\n        return filteredLaunches.map( lambda_launch => (\n            <LaunchItem key={lambda_launch.flight_number} prop_launch={lambda_launch}></LaunchItem>\n        )) //key is used to identify/label the items in a list. Keys help React identify which items\n           //have changed, are added, or are removed\n    };\n\n    return (\n        <React.Fragment>\n            <h1 className=\"display-4 my-3\"></h1>\n            <MissionKey />\n        {displayLaunches()}\n        </React.Fragment>\n    ); // ( Note: Run or refer-to react code within {} )\n};\n    \n\n\n\n\n\n// function Launches() {\n//     const {loading, error, data} = useQuery(LAUNCHES_QUERY);\n//     if (loading) {return <h4>Loading...</h4>;}\n//     if (error) {console.log(\"error=\", error);}\n//     console.log(\"data=\", data);\n//     return <h1>test</h1>;\n// };\n\n// export class Launches extends Component {\n//     render() {\n//         return (\n//             <div>\n//                 <h1 className=\"display-4 my-3\">Launches</h1>\n//             </div>\n//         )\n//     }\n// }\n\n\nexport default Launches;","/Users/guprahul7/Desktop/React/spacex_launch_stats/client/src/components/launchitem.js",[],"/Users/guprahul7/Desktop/React/spacex_launch_stats/client/src/components/mission_key.js",[],"/Users/guprahul7/Desktop/React/spacex_launch_stats/client/src/components/launch.js",["37"],"import React from 'react';\nimport { gql, useQuery } from '@apollo/client';\nimport { Link } from 'react-router-dom';\nimport classNames from 'classnames';\nimport Moment from 'react-moment';\n\nconst LAUNCH_QUERY = gql `\nquery LaunchQuery($f_number_variable: Int!) {\n    launch(f_number: $f_number_variable) {\n        flight_number\n        mission_name\n        launch_year\n        launch_success\n        launch_date_local\n        rocket {\n            rocket_id,\n            rocket_name,\n            rocket_type\n        }\n    }\n}\n`;\n\nconst Launch = (props) => {\n    let { f_number_url } = props.match.params; //a matching parameter (:f_number_url) is referenced in app.js\n    f_number_url = parseInt(f_number_url); //defaults to a string in the url, so need to convert to int\n    //console.log(\"f_number_url=\", f_number_url);\n    const { loading, error, data } = useQuery(\n                                        LAUNCH_QUERY, \n                                        { variables: { f_number_variable: f_number_url } }\n                                    ); \n    /*  gql helps us avoid the following redundancy -> variables: { f_number_variable: f_number_variable }\n        by letting us simply do this -> variables: { f_number_variable } provided f_number_variable \n        is already assigned a value. Kind of like implicit assignation.\n    */\n\n    const displayLaunch = () => {\n        if (loading) return <h4>Loading...</h4>;\n        if (error) console.log(error);\n\n        const { flight_number, \n                mission_name, \n                launch_success, \n                launch_year, \n                launch_date_local, \n                rocket } = data.launch; //launch endpt/query of gql\n\n        return (\n            <div>\n                <h1 className=\"display-4 my-3\">\n                    <span className=\"text-light\">Mission:</span> {mission_name}\n                </h1>\n                <h4 className=\"mb-3\">Launch Details</h4>\n                <ul className=\"list-group\">\n                    <li className=\"list-group-item\">Flight Number: {flight_number}</li>\n                    <li className=\"list-group-item\">\n                        LaunchYear: <Moment format=\"YYYY\">{launch_date_local}</Moment>\n                    </li>\n                    <li className=\"list-group-item\">\n                        Launch Successful: \n                        <span className={classNames({\n                            'text-success': launch_success,\n                            'text-danger': !launch_success\n                            })}> \n                        {launch_success ? 'Yes' : 'No'}\n                        </span>\n                    </li>\n                </ul>\n                <h4 className=\"my-3\">Rocket Details</h4>\n                <ul className=\"list-group\">\n                    <li className=\"group-list-item\">Rocket ID: {rocket.id}</li>\n                    <li className=\"group-list-item\">Rocket Name: {rocket.name}</li>\n                    <li className=\"group-list-item\">Rocket Type: {rocket.type}</li>\n                </ul>\n                <hr />\n                <Link to=\"/\" className=\"btn btn-secondary\">Back</Link>\n            </div>\n        );\n    };\n\n    return <React.Fragment>{displayLaunch()}</React.Fragment>;\n};\n\n\nexport default Launch;",{"ruleId":"38","severity":1,"message":"39","line":9,"column":10,"nodeType":"40","messageId":"41","endLine":9,"endColumn":18},{"ruleId":"38","severity":1,"message":"42","line":9,"column":20,"nodeType":"40","messageId":"41","endLine":9,"endColumn":23},{"ruleId":"38","severity":1,"message":"43","line":4,"column":17,"nodeType":"40","messageId":"41","endLine":4,"endColumn":26},{"ruleId":"44","severity":1,"message":"45","line":44,"column":13,"nodeType":"46","endLine":44,"endColumn":44},{"ruleId":"38","severity":1,"message":"47","line":44,"column":17,"nodeType":"40","messageId":"41","endLine":44,"endColumn":28},"no-unused-vars","'useQuery' is defined but never used.","Identifier","unusedVar","'gql' is defined but never used.","'Component' is defined but never used.","jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.","JSXOpeningElement","'launch_year' is assigned a value but never used."]