{"ast":null,"code":"import _taggedTemplateLiteral from\"/Users/guprahul7/Desktop/React/spacex_launch_stats/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";var _templateObject;//Launches is where we want to make the query to GraphQL\n//We want to use class based components\nimport React,{Component}from'react';import{gql,useQuery}from'@apollo/client';import LaunchItem from'./launchitem';import MissionKey from'./mission_key';/*The query part is in the render. Creating it here.\nquery LaunchesQuery is just to label that query\n*/import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var LAUNCHES_QUERY=gql(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n    query LaunchesQuery {\\n        launches {\\n            flight_number\\n            mission_name\\n            launch_date_local\\n            launch_success\\n        }\\n    }\\n\"])));/* \n    using/referencing the launches query (that we defined in schema.js) to make \n    a request to the spaceX api for the data we need. By default, the launches \n    query requests data for all fields we specified in its definition, however \n    here we are only requesting for specific fields that we need \n    */var Launches=function Launches(){var _useQuery=useQuery(LAUNCHES_QUERY),loading=_useQuery.loading,error=_useQuery.error,data=_useQuery.data;if(loading){return/*#__PURE__*/_jsx(\"h4\",{children:\"Loading...\"});}if(error){console.log(\"error=\",error);}//console.log(\"data=\", data);\nvar filteredLaunches=data.launches;//launches query of gql - a list of launchType objects\nvar displayLaunches=function displayLaunches(){return filteredLaunches.map(function(lambda_launch){return/*#__PURE__*/_jsx(LaunchItem,{prop_launch:lambda_launch},lambda_launch.flight_number);});//key is used to identify/label the items in a list. Keys help React identify which items\n//have changed, are added, or are removed\n};return/*#__PURE__*/_jsxs(React.Fragment,{children:[/*#__PURE__*/_jsx(\"h1\",{className:\"display-4 my-3\"}),/*#__PURE__*/_jsx(MissionKey,{}),displayLaunches()]});// ( Note: Run or refer-to react code within {} )\n};// function Launches() {\n//     const {loading, error, data} = useQuery(LAUNCHES_QUERY);\n//     if (loading) {return <h4>Loading...</h4>;}\n//     if (error) {console.log(\"error=\", error);}\n//     console.log(\"data=\", data);\n//     return <h1>test</h1>;\n// };\n// export class Launches extends Component {\n//     render() {\n//         return (\n//             <div>\n//                 <h1 className=\"display-4 my-3\">Launches</h1>\n//             </div>\n//         )\n//     }\n// }\nexport default Launches;","map":{"version":3,"sources":["/Users/guprahul7/Desktop/React/spacex_launch_stats/client/src/components/launches.js"],"names":["React","Component","gql","useQuery","LaunchItem","MissionKey","LAUNCHES_QUERY","Launches","loading","error","data","console","log","filteredLaunches","launches","displayLaunches","map","lambda_launch","flight_number"],"mappings":"oNAAA;AACA;AAEA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA,OAASC,GAAT,CAAcC,QAAd,KAA8B,gBAA9B,CACA,MAAOC,CAAAA,UAAP,KAAuB,cAAvB,CACA,MAAOC,CAAAA,UAAP,KAAuB,eAAvB,CAEA;AACA;AACA,E,wFACA,GAAMC,CAAAA,cAAc,CAAGJ,GAAH,oPAApB,CASG;AACH;AACA;AACA;AACA;AACA,MAEA,GAAMK,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,EAAM,CACnB,cAA+BJ,QAAQ,CAACG,cAAD,CAAvC,CAAOE,OAAP,WAAOA,OAAP,CAAgBC,KAAhB,WAAgBA,KAAhB,CAAuBC,IAAvB,WAAuBA,IAAvB,CACA,GAAIF,OAAJ,CAAa,CAAC,mBAAO,kCAAP,CAA4B,CAC1C,GAAIC,KAAJ,CAAW,CAACE,OAAO,CAACC,GAAR,CAAY,QAAZ,CAAsBH,KAAtB,EAA8B,CAC1C;AAEA,GAAII,CAAAA,gBAAgB,CAAGH,IAAI,CAACI,QAA5B,CAAsC;AACtC,GAAMC,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,EAAM,CAC1B,MAAOF,CAAAA,gBAAgB,CAACG,GAAjB,CAAsB,SAAAC,aAAa,qBACtC,KAAC,UAAD,EAA8C,WAAW,CAAEA,aAA3D,EAAiBA,aAAa,CAACC,aAA/B,CADsC,EAAnC,CAAP,CAEG;AACA;AACN,CALD,CAOA,mBACI,MAAC,KAAD,CAAO,QAAP,yBACI,WAAI,SAAS,CAAC,gBAAd,EADJ,cAEI,KAAC,UAAD,IAFJ,CAGCH,eAAe,EAHhB,GADJ,CAMG;AACN,CArBD,CA4BA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA,cAAeR,CAAAA,QAAf","sourcesContent":["//Launches is where we want to make the query to GraphQL\n//We want to use class based components\n\nimport React, { Component } from 'react';\nimport { gql, useQuery } from '@apollo/client';\nimport LaunchItem from './launchitem';\nimport MissionKey from './mission_key';\n\n/*The query part is in the render. Creating it here.\nquery LaunchesQuery is just to label that query\n*/\nconst LAUNCHES_QUERY = gql `\n    query LaunchesQuery {\n        launches {\n            flight_number\n            mission_name\n            launch_date_local\n            launch_success\n        }\n    }\n`; /* \n    using/referencing the launches query (that we defined in schema.js) to make \n    a request to the spaceX api for the data we need. By default, the launches \n    query requests data for all fields we specified in its definition, however \n    here we are only requesting for specific fields that we need \n    */\n\nconst Launches = () => {\n    const {loading, error, data} = useQuery(LAUNCHES_QUERY);\n    if (loading) {return <h4>Loading...</h4>;}\n    if (error) {console.log(\"error=\", error);}\n    //console.log(\"data=\", data);\n    \n    let filteredLaunches = data.launches; //launches query of gql - a list of launchType objects\n    const displayLaunches = () => {\n        return filteredLaunches.map( lambda_launch => (\n            <LaunchItem key={lambda_launch.flight_number} prop_launch={lambda_launch}></LaunchItem>\n        )) //key is used to identify/label the items in a list. Keys help React identify which items\n           //have changed, are added, or are removed\n    };\n\n    return (\n        <React.Fragment>\n            <h1 className=\"display-4 my-3\"></h1>\n            <MissionKey />\n        {displayLaunches()}\n        </React.Fragment>\n    ); // ( Note: Run or refer-to react code within {} )\n};\n    \n\n\n\n\n\n// function Launches() {\n//     const {loading, error, data} = useQuery(LAUNCHES_QUERY);\n//     if (loading) {return <h4>Loading...</h4>;}\n//     if (error) {console.log(\"error=\", error);}\n//     console.log(\"data=\", data);\n//     return <h1>test</h1>;\n// };\n\n// export class Launches extends Component {\n//     render() {\n//         return (\n//             <div>\n//                 <h1 className=\"display-4 my-3\">Launches</h1>\n//             </div>\n//         )\n//     }\n// }\n\n\nexport default Launches;"]},"metadata":{},"sourceType":"module"}