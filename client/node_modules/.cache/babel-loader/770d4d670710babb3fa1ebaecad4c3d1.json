{"ast":null,"code":"import _taggedTemplateLiteral from\"/Users/guprahul7/Desktop/React/spacex_launch_stats/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";var _templateObject;import React from'react';import{gql,useQuery}from'@apollo/client';import{Link}from'react-router-dom';import classNames from'classnames';import Moment from'react-moment';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var LAUNCH_QUERY=gql(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\nquery LaunchQuery($f_number_variable: Int!) {\\n    launch(f_number: $f_number_variable) {\\n        flight_number\\n        mission_name\\n        launch_year\\n        launch_success\\n        launch_date_local\\n        rocket {\\n            rocket_id,\\n            rocket_name,\\n            rocket_type\\n        }\\n    }\\n}\\n\"])));var Launch=function Launch(props){var f_number_url=props.match.params.f_number_url;//a matching parameter (:f_number_url) is referenced in app.js\nf_number_url=parseInt(f_number_url);//defaults to a string in the url, so need to convert to int\n//console.log(\"f_number_url=\", f_number_url);\nvar _useQuery=useQuery(LAUNCH_QUERY,{variables:{f_number_variable:f_number_url}}),loading=_useQuery.loading,error=_useQuery.error,data=_useQuery.data;/*  gql helps us avoid the following redundancy -> variables: { f_number_variable: f_number_variable }\n        by letting us simply do this -> variables: { f_number_variable } provided f_number_variable \n        is already assigned a value. Kind of like implicit assignation.\n    */var displayLaunch=function displayLaunch(){if(loading)return/*#__PURE__*/_jsx(\"h4\",{children:\"Loading...\"});if(error)console.log(error);var _data$launch=data.launch,flight_number=_data$launch.flight_number,mission_name=_data$launch.mission_name,launch_success=_data$launch.launch_success,launch_year=_data$launch.launch_year,launch_date_local=_data$launch.launch_date_local,rocket=_data$launch.rocket;//launch endpt/query of gql\nreturn/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"h1\",{className:\"display-4 my-3\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"text-light\",children:\"Mission:\"}),\" \",mission_name]}),/*#__PURE__*/_jsx(\"h4\",{className:\"mb-3\",children:\"Launch Details\"}),/*#__PURE__*/_jsxs(\"ul\",{className:\"list-group\",children:[/*#__PURE__*/_jsxs(\"li\",{className:\"list-group-item\",children:[\"Flight Number: \",flight_number]}),/*#__PURE__*/_jsxs(\"li\",{className:\"list-group-item\",children:[\"LaunchYear: \",/*#__PURE__*/_jsx(Moment,{format:\"YYYY\",children:launch_date_local})]}),/*#__PURE__*/_jsxs(\"li\",{className:\"list-group-item\",children:[\"Launch Successful:\",/*#__PURE__*/_jsx(\"span\",{className:classNames({'text-success':launch_success,'text-danger':!launch_success}),children:launch_success?'Yes':'No'})]})]}),/*#__PURE__*/_jsx(\"h4\",{className:\"my-3\",children:\"Rocket Details\"}),/*#__PURE__*/_jsxs(\"ul\",{className:\"list-group\",children:[/*#__PURE__*/_jsxs(\"li\",{className:\"group-list-item\",children:[\"Rocket ID: \",rocket.id]}),/*#__PURE__*/_jsxs(\"li\",{className:\"group-list-item\",children:[\"Rocket Name: \",rocket.name]}),/*#__PURE__*/_jsxs(\"li\",{className:\"group-list-item\",children:[\"Rocket Type: \",rocket.type]})]}),/*#__PURE__*/_jsx(\"hr\",{}),/*#__PURE__*/_jsx(Link,{to:\"/\",className:\"btn btn-secondary\",children:\"Back\"})]});};return/*#__PURE__*/_jsx(React.Fragment,{children:displayLaunch()});};export default Launch;","map":{"version":3,"sources":["/Users/guprahul7/Desktop/React/spacex_launch_stats/client/src/components/launch.js"],"names":["React","gql","useQuery","Link","classNames","Moment","LAUNCH_QUERY","Launch","props","f_number_url","match","params","parseInt","variables","f_number_variable","loading","error","data","displayLaunch","console","log","launch","flight_number","mission_name","launch_success","launch_year","launch_date_local","rocket","id","name","type"],"mappings":"oNAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,GAAT,CAAcC,QAAd,KAA8B,gBAA9B,CACA,OAASC,IAAT,KAAqB,kBAArB,CACA,MAAOC,CAAAA,UAAP,KAAuB,YAAvB,CACA,MAAOC,CAAAA,MAAP,KAAmB,cAAnB,C,wFAEA,GAAMC,CAAAA,YAAY,CAAGL,GAAH,qYAAlB,CAiBA,GAAMM,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,CAACC,KAAD,CAAW,CACtB,GAAMC,CAAAA,YAAN,CAAuBD,KAAK,CAACE,KAAN,CAAYC,MAAnC,CAAMF,YAAN,CAA2C;AAC3CA,YAAY,CAAGG,QAAQ,CAACH,YAAD,CAAvB,CAAuC;AACvC;AACA,cAAiCP,QAAQ,CACLI,YADK,CAEL,CAAEO,SAAS,CAAE,CAAEC,iBAAiB,CAAEL,YAArB,CAAb,CAFK,CAAzC,CAAQM,OAAR,WAAQA,OAAR,CAAiBC,KAAjB,WAAiBA,KAAjB,CAAwBC,IAAxB,WAAwBA,IAAxB,CAIA;AACJ;AACA;AACA,MAEI,GAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,EAAM,CACxB,GAAIH,OAAJ,CAAa,mBAAO,kCAAP,CACb,GAAIC,KAAJ,CAAWG,OAAO,CAACC,GAAR,CAAYJ,KAAZ,EAEX,iBAKmBC,IAAI,CAACI,MALxB,CAAQC,aAAR,cAAQA,aAAR,CACQC,YADR,cACQA,YADR,CAEQC,cAFR,cAEQA,cAFR,CAGQC,WAHR,cAGQA,WAHR,CAIQC,iBAJR,cAIQA,iBAJR,CAKQC,MALR,cAKQA,MALR,CAKgC;AAEhC,mBACI,oCACI,YAAI,SAAS,CAAC,gBAAd,wBACI,aAAM,SAAS,CAAC,YAAhB,sBADJ,KACkDJ,YADlD,GADJ,cAII,WAAI,SAAS,CAAC,MAAd,4BAJJ,cAKI,YAAI,SAAS,CAAC,YAAd,wBACI,YAAI,SAAS,CAAC,iBAAd,6BAAgDD,aAAhD,GADJ,cAEI,YAAI,SAAS,CAAC,iBAAd,uCACgB,KAAC,MAAD,EAAQ,MAAM,CAAC,MAAf,UAAuBI,iBAAvB,EADhB,GAFJ,cAKI,YAAI,SAAS,CAAC,iBAAd,6CAEI,aAAM,SAAS,CAAEtB,UAAU,CAAC,CACxB,eAAgBoB,cADQ,CAExB,cAAe,CAACA,cAFQ,CAAD,CAA3B,UAICA,cAAc,CAAG,KAAH,CAAW,IAJ1B,EAFJ,GALJ,GALJ,cAoBI,WAAI,SAAS,CAAC,MAAd,4BApBJ,cAqBI,YAAI,SAAS,CAAC,YAAd,wBACI,YAAI,SAAS,CAAC,iBAAd,yBAA4CG,MAAM,CAACC,EAAnD,GADJ,cAEI,YAAI,SAAS,CAAC,iBAAd,2BAA8CD,MAAM,CAACE,IAArD,GAFJ,cAGI,YAAI,SAAS,CAAC,iBAAd,2BAA8CF,MAAM,CAACG,IAArD,GAHJ,GArBJ,cA0BI,aA1BJ,cA2BI,KAAC,IAAD,EAAM,EAAE,CAAC,GAAT,CAAa,SAAS,CAAC,mBAAvB,kBA3BJ,GADJ,CA+BH,CA1CD,CA4CA,mBAAO,KAAC,KAAD,CAAO,QAAP,WAAiBZ,aAAa,EAA9B,EAAP,CACH,CA1DD,CA6DA,cAAeX,CAAAA,MAAf","sourcesContent":["import React from 'react';\nimport { gql, useQuery } from '@apollo/client';\nimport { Link } from 'react-router-dom';\nimport classNames from 'classnames';\nimport Moment from 'react-moment';\n\nconst LAUNCH_QUERY = gql `\nquery LaunchQuery($f_number_variable: Int!) {\n    launch(f_number: $f_number_variable) {\n        flight_number\n        mission_name\n        launch_year\n        launch_success\n        launch_date_local\n        rocket {\n            rocket_id,\n            rocket_name,\n            rocket_type\n        }\n    }\n}\n`;\n\nconst Launch = (props) => {\n    let { f_number_url } = props.match.params; //a matching parameter (:f_number_url) is referenced in app.js\n    f_number_url = parseInt(f_number_url); //defaults to a string in the url, so need to convert to int\n    //console.log(\"f_number_url=\", f_number_url);\n    const { loading, error, data } = useQuery(\n                                        LAUNCH_QUERY, \n                                        { variables: { f_number_variable: f_number_url } }\n                                    ); \n    /*  gql helps us avoid the following redundancy -> variables: { f_number_variable: f_number_variable }\n        by letting us simply do this -> variables: { f_number_variable } provided f_number_variable \n        is already assigned a value. Kind of like implicit assignation.\n    */\n\n    const displayLaunch = () => {\n        if (loading) return <h4>Loading...</h4>;\n        if (error) console.log(error);\n\n        const { flight_number, \n                mission_name, \n                launch_success, \n                launch_year, \n                launch_date_local, \n                rocket } = data.launch; //launch endpt/query of gql\n\n        return (\n            <div>\n                <h1 className=\"display-4 my-3\">\n                    <span className=\"text-light\">Mission:</span> {mission_name}\n                </h1>\n                <h4 className=\"mb-3\">Launch Details</h4>\n                <ul className=\"list-group\">\n                    <li className=\"list-group-item\">Flight Number: {flight_number}</li>\n                    <li className=\"list-group-item\">\n                        LaunchYear: <Moment format=\"YYYY\">{launch_date_local}</Moment>\n                    </li>\n                    <li className=\"list-group-item\">\n                        Launch Successful: \n                        <span className={classNames({\n                            'text-success': launch_success,\n                            'text-danger': !launch_success\n                            })}> \n                        {launch_success ? 'Yes' : 'No'}\n                        </span>\n                    </li>\n                </ul>\n                <h4 className=\"my-3\">Rocket Details</h4>\n                <ul className=\"list-group\">\n                    <li className=\"group-list-item\">Rocket ID: {rocket.id}</li>\n                    <li className=\"group-list-item\">Rocket Name: {rocket.name}</li>\n                    <li className=\"group-list-item\">Rocket Type: {rocket.type}</li>\n                </ul>\n                <hr />\n                <Link to=\"/\" className=\"btn btn-secondary\">Back</Link>\n            </div>\n        );\n    };\n\n    return <React.Fragment>{displayLaunch()}</React.Fragment>;\n};\n\n\nexport default Launch;"]},"metadata":{},"sourceType":"module"}