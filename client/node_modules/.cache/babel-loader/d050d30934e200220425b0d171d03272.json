{"ast":null,"code":"var _jsxFileName = \"/Users/guprahul7/Desktop/React/spacex_launch_stats/client/src/components/launches.js\",\n    _s = $RefreshSig$();\n\n//Launches is where we want to make the query to GraphQL\n//We want to use class based components\nimport React, { Component } from 'react';\nimport { gql, useQuery } from '@apollo/client';\nimport LaunchItem from './launchitem';\nimport MissionKey from './mission_key';\n/*The query part is in the render. Creating it here.\nquery LaunchesQuery is just to label that query\n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LAUNCHES_QUERY = gql`\n    query LaunchesQuery {\n        launches {\n            flight_number\n            mission_name\n            launch_date_local\n            launch_success\n        }\n    }\n`;\n/* referencing/using the launches query (we defined in schema.js) to make \n a request to the spaceX api for the data we need. By default, the launches \n query requests data for all fields we specified in its definition, here we\n are only requesting for specific fields that we need */\n\nconst Launches = () => {\n  _s();\n\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(LAUNCHES_QUERY);\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 26\n    }, this);\n  }\n\n  if (error) {\n    console.log(\"error=\", error);\n  } //console.log(\"data=\", data);\n\n\n  let filteredLaunches = data.launches; //launches query of gql\n\n  const displayLaunches = () => {\n    return filteredLaunches.map(lambda_launch => /*#__PURE__*/_jsxDEV(LaunchItem, {\n      prop_launch: lambda_launch\n    }, lambda_launch.flight_number, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this)); //key is used to identify/label the items in a list\n  };\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"display-4 my-3\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(MissionKey, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this), displayLaunches()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this); // ( Note: Run or refer-to react code within {} )\n}; // function Launches() {\n//     const {loading, error, data} = useQuery(LAUNCHES_QUERY);\n//     if (loading) {return <h4>Loading...</h4>;}\n//     if (error) {console.log(\"error=\", error);}\n//     console.log(\"data=\", data);\n//     return <h1>test</h1>;\n// };\n// export class Launches extends Component {\n//     render() {\n//         return (\n//             <div>\n//                 <h1 className=\"display-4 my-3\">Launches</h1>\n//             </div>\n//         )\n//     }\n// }\n\n\n_s(Launches, \"ATRudwUnWENk7lEGiyv3yjumjxE=\", false, function () {\n  return [useQuery];\n});\n\n_c = Launches;\nexport default Launches;\n\nvar _c;\n\n$RefreshReg$(_c, \"Launches\");","map":{"version":3,"sources":["/Users/guprahul7/Desktop/React/spacex_launch_stats/client/src/components/launches.js"],"names":["React","Component","gql","useQuery","LaunchItem","MissionKey","LAUNCHES_QUERY","Launches","loading","error","data","console","log","filteredLaunches","launches","displayLaunches","map","lambda_launch","flight_number"],"mappings":";;;AAAA;AACA;AAEA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,GAAT,EAAcC,QAAd,QAA8B,gBAA9B;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,UAAP,MAAuB,eAAvB;AAEA;AACA;AACA;;;AACA,MAAMC,cAAc,GAAGJ,GAAK;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CATA;AASG;AACH;AACA;AACA;;AAEA,MAAMK,QAAQ,GAAG,MAAM;AAAA;;AACnB,QAAM;AAACC,IAAAA,OAAD;AAAUC,IAAAA,KAAV;AAAiBC,IAAAA;AAAjB,MAAyBP,QAAQ,CAACG,cAAD,CAAvC;;AACA,MAAIE,OAAJ,EAAa;AAAC,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AAA4B;;AAC1C,MAAIC,KAAJ,EAAW;AAACE,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBH,KAAtB;AAA8B,GAHvB,CAInB;;;AAEA,MAAII,gBAAgB,GAAGH,IAAI,CAACI,QAA5B,CANmB,CAMmB;;AACtC,QAAMC,eAAe,GAAG,MAAM;AAC1B,WAAOF,gBAAgB,CAACG,GAAjB,CAAsBC,aAAa,iBACtC,QAAC,UAAD;AAA8C,MAAA,WAAW,EAAEA;AAA3D,OAAiBA,aAAa,CAACC,aAA/B;AAAA;AAAA;AAAA;AAAA,YADG,CAAP,CAD0B,CAGvB;AACN,GAJD;;AAMA,sBACI,QAAC,KAAD,CAAO,QAAP;AAAA,4BACI;AAAI,MAAA,SAAS,EAAC;AAAd;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA,YAFJ,EAGCH,eAAe,EAHhB;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ,CAbmB,CAmBhB;AACN,CApBD,C,CA2BA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;GA3CMR,Q;UAC6BJ,Q;;;KAD7BI,Q;AA8CN,eAAeA,QAAf","sourcesContent":["//Launches is where we want to make the query to GraphQL\n//We want to use class based components\n\nimport React, { Component } from 'react';\nimport { gql, useQuery } from '@apollo/client';\nimport LaunchItem from './launchitem';\nimport MissionKey from './mission_key';\n\n/*The query part is in the render. Creating it here.\nquery LaunchesQuery is just to label that query\n*/\nconst LAUNCHES_QUERY = gql `\n    query LaunchesQuery {\n        launches {\n            flight_number\n            mission_name\n            launch_date_local\n            launch_success\n        }\n    }\n`; /* referencing/using the launches query (we defined in schema.js) to make \n    a request to the spaceX api for the data we need. By default, the launches \n    query requests data for all fields we specified in its definition, here we\n    are only requesting for specific fields that we need */\n\nconst Launches = () => {\n    const {loading, error, data} = useQuery(LAUNCHES_QUERY);\n    if (loading) {return <h4>Loading...</h4>;}\n    if (error) {console.log(\"error=\", error);}\n    //console.log(\"data=\", data);\n    \n    let filteredLaunches = data.launches; //launches query of gql\n    const displayLaunches = () => {\n        return filteredLaunches.map( lambda_launch => (\n            <LaunchItem key={lambda_launch.flight_number} prop_launch={lambda_launch}></LaunchItem>\n        )) //key is used to identify/label the items in a list\n    };\n\n    return (\n        <React.Fragment>\n            <h1 className=\"display-4 my-3\"></h1>\n            <MissionKey />\n        {displayLaunches()}\n        </React.Fragment>\n    ); // ( Note: Run or refer-to react code within {} )\n};\n    \n\n\n\n\n\n// function Launches() {\n//     const {loading, error, data} = useQuery(LAUNCHES_QUERY);\n//     if (loading) {return <h4>Loading...</h4>;}\n//     if (error) {console.log(\"error=\", error);}\n//     console.log(\"data=\", data);\n//     return <h1>test</h1>;\n// };\n\n// export class Launches extends Component {\n//     render() {\n//         return (\n//             <div>\n//                 <h1 className=\"display-4 my-3\">Launches</h1>\n//             </div>\n//         )\n//     }\n// }\n\n\nexport default Launches;"]},"metadata":{},"sourceType":"module"}